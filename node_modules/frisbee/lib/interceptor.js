'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Interceptor = function Interceptor(API) {
  var _this = this;

  var interceptableMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  (0, _classCallCheck3.default)(this, Interceptor);

  this.interceptedMethod = function (APIMethod) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var interceptors = _this.interceptors;
    var reversedInterceptors = interceptors.slice().reverse();
    var promise = _promise2.default.resolve(args);

    // Register request interceptors
    interceptors.forEach(function (_ref) {
      var request = _ref.request,
          requestError = _ref.requestError;

      if (typeof request === 'function') {
        promise = promise.then(function (args) {
          return request.apply(undefined, (0, _toConsumableArray3.default)(args));
        });
      }
      if (typeof requestError === 'function') {
        promise = promise.catch(requestError);
      }
    });

    // Register APIMethod call
    if (typeof APIMethod === 'function') {
      promise = promise.then(function (args) {
        return APIMethod.apply(undefined, (0, _toConsumableArray3.default)(args));
      });
    }

    // Register response interceptors
    reversedInterceptors.forEach(function (_ref2) {
      var response = _ref2.response,
          responseError = _ref2.responseError;

      if (typeof response === 'function') {
        promise = promise.then(response);
      }
      if (typeof responseError === 'function') {
        promise = promise.catch(responseError);
      }
    });

    return promise;
  };

  this.register = function (interceptor) {
    _this.interceptors.push(interceptor);
    return function () {
      _this.unregister(interceptor);
    };
  };

  this.unregister = function (interceptor) {
    var index = _this.interceptors.indexOf(interceptor);
    if (index >= 0) {
      _this.interceptors.splice(index, 1);
    }
  };

  this.clear = function () {
    _this.interceptors = [];
  };

  this.interceptors = [];

  if (!API) throw new Error('API should be passed to the Interceptor');

  if (interceptableMethods.length === 0) throw new Error('no methods were added to interceptableMethods');

  interceptableMethods.forEach(function (methodName) {
    var APIMethod = API[methodName];
    API[methodName] = function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _this.interceptedMethod.apply(_this, [APIMethod].concat(args));
    };
  });
};

exports.default = Interceptor;
module.exports = exports['default'];